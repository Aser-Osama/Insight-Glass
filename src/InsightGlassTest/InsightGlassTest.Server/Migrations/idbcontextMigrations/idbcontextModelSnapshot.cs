// <auto-generated />
using System;
using InsightGlassTest.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsightGlassTest.Server.Migrations.idbcontextMigrations
{
    [DbContext(typeof(idbcontext))]
    partial class idbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AspnetroleAspnetuser", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("AspnetroleAspnetuser");
                });

            modelBuilder.Entity("AspnetuserAspnetuser", b =>
                {
                    b.Property<string>("FollowsUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ThisUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("FollowsUserId", "ThisUserId");

                    b.ToTable("AspnetuserAspnetuser");
                });

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles", (string)null);
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Application", b =>
                {
                    b.Property<int>("ApplicationJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ApplicationJobId"));

                    b.Property<string>("ApplicationSeekerUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationCompanyUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationResume")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ApplicationJobId", "ApplicationSeekerUserId", "ApplicationCompanyUserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "ApplicationCompanyUserId" }, "FK_CompanyApplicationId");

                    b.HasIndex(new[] { "ApplicationSeekerUserId" }, "FK_SeekerApplicationId");

                    b.ToTable("application");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetrole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetroles");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetroleclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("aspnetroleclaims");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetuser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetusers");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetuserclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("aspnetuserclaims");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetuserlogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("aspnetuserlogins");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetusertoken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("aspnetusertokens");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Blogcomment", b =>
                {
                    b.Property<int>("BlogCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogCommentID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BlogCommentId"));

                    b.Property<string>("BlogUserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BlogUserID");

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CommentDownVote")
                        .HasColumnType("int");

                    b.Property<int?>("CommentUpVote")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CommentUploadDate")
                        .HasColumnType("date");

                    b.HasKey("BlogCommentId", "BlogUserId", "BlogId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "BlogId" }, "FK_BlogCommentId");

                    b.HasIndex(new[] { "BlogUserId" }, "FK_UserCommentId");

                    b.ToTable("blogcomment");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Blogpost", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("BlogUserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BlogUserID");

                    b.Property<string>("BlogBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BlogNumLikes")
                        .HasColumnType("int");

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("BlogUploadDate")
                        .HasColumnType("date");

                    b.HasKey("BlogId", "BlogUserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "BlogUserId" }, "FK_UserBlogId");

                    b.ToTable("blogpost");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Company", b =>
                {
                    b.Property<string>("CompanyUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyBiography")
                        .HasColumnType("text");

                    b.Property<string>("CompanyCity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyGovernate")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyIndustry")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanySize")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CompanyUserId")
                        .HasName("PRIMARY");

                    b.ToTable("company");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Companyfeedback", b =>
                {
                    b.Property<string>("FeedbackSeekerUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FeedbackCompanyUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FeedbackRatingComment")
                        .HasColumnType("text");

                    b.Property<int>("FeedbackRatingScore")
                        .HasColumnType("int");

                    b.HasKey("FeedbackSeekerUserId", "FeedbackCompanyUserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FeedbackCompanyUserId" }, "FK_CompanyUserId1");

                    b.ToTable("companyfeedback");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Jobopening", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("JobId"));

                    b.Property<string>("JobCompanyUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("JobDetails")
                        .HasColumnType("text");

                    b.Property<string>("JobEmploymentType")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("JobSalary")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("JobId", "JobCompanyUserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "JobCompanyUserId" }, "FK_JobCompanyUserId");

                    b.ToTable("jobopening");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Seeker", b =>
                {
                    b.Property<string>("SeekerUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SeekerBiography")
                        .HasColumnType("text");

                    b.Property<string>("SeekerCity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("SeekerDateOfGraduation")
                        .HasColumnType("date");

                    b.Property<string>("SeekerDegree")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SeekerGovernate")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SeekerSavedResume")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SeekerUniversity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SeekerUserId")
                        .HasName("PRIMARY");

                    b.ToTable("seeker");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Seekerexperience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ExperienceId"));

                    b.Property<string>("ExperienceSeekerUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExperienceCompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExperienceDetails")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ExperienceEnd")
                        .HasColumnType("date");

                    b.Property<string>("ExperienceRole")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("ExperienceStart")
                        .HasColumnType("date");

                    b.HasKey("ExperienceId", "ExperienceSeekerUserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ExperienceSeekerUserId" }, "FK_SeekerExpId1");

                    b.ToTable("seekerexperience");
                });

            modelBuilder.Entity("Userfollowing", b =>
                {
                    b.Property<string>("ThisUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FollowsUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ThisUserId", "FollowsUserId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FollowsUserId" }, "FK_FollowsUserId");

                    b.ToTable("userfollowing", (string)null);
                });

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetrole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId");

                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Application", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Company", "ApplicationCompanyUser")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationCompanyUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyApplicationId");

                    b.HasOne("InsightGlassTest.Server.Models.Seeker", "ApplicationSeekerUser")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationSeekerUserId")
                        .IsRequired()
                        .HasConstraintName("FK_SeekerApplicationId");

                    b.Navigation("ApplicationCompanyUser");

                    b.Navigation("ApplicationSeekerUser");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetroleclaim", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetrole", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetuserclaim", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetuserlogin", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetusertoken", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", "User")
                        .WithMany("Aspnetusertokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Blogcomment", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", "BlogUser")
                        .WithMany("Blogcomments")
                        .HasForeignKey("BlogUserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserCommentId");

                    b.Navigation("BlogUser");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Blogpost", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", "BlogUser")
                        .WithMany("Blogposts")
                        .HasForeignKey("BlogUserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserBlogId");

                    b.Navigation("BlogUser");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Company", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", "CompanyUser")
                        .WithOne("Company")
                        .HasForeignKey("InsightGlassTest.Server.Models.Company", "CompanyUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyuserId");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Companyfeedback", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Company", "FeedbackCompanyUser")
                        .WithMany("Companyfeedbacks")
                        .HasForeignKey("FeedbackCompanyUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyUserId1");

                    b.HasOne("InsightGlassTest.Server.Models.Seeker", "FeedbackSeekerUser")
                        .WithMany("Companyfeedbacks")
                        .HasForeignKey("FeedbackSeekerUserId")
                        .IsRequired()
                        .HasConstraintName("FK_SeekerUserId1");

                    b.Navigation("FeedbackCompanyUser");

                    b.Navigation("FeedbackSeekerUser");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Jobopening", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Company", "JobCompanyUser")
                        .WithMany("Jobopenings")
                        .HasForeignKey("JobCompanyUserId")
                        .IsRequired()
                        .HasConstraintName("FK_JobCompanyUserId");

                    b.Navigation("JobCompanyUser");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Seeker", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", "SeekerUser")
                        .WithOne("Seeker")
                        .HasForeignKey("InsightGlassTest.Server.Models.Seeker", "SeekerUserId")
                        .IsRequired()
                        .HasConstraintName("FK_userId");

                    b.Navigation("SeekerUser");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Seekerexperience", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Seeker", "ExperienceSeekerUser")
                        .WithMany("Seekerexperiences")
                        .HasForeignKey("ExperienceSeekerUserId")
                        .IsRequired()
                        .HasConstraintName("FK_SeekerExpId1");

                    b.Navigation("ExperienceSeekerUser");
                });

            modelBuilder.Entity("Userfollowing", b =>
                {
                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", null)
                        .WithMany()
                        .HasForeignKey("FollowsUserId")
                        .IsRequired()
                        .HasConstraintName("FK_FollowsUserId");

                    b.HasOne("InsightGlassTest.Server.Models.Aspnetuser", null)
                        .WithMany()
                        .HasForeignKey("ThisUserId")
                        .IsRequired()
                        .HasConstraintName("FK_ThisUserId");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetrole", b =>
                {
                    b.Navigation("Aspnetroleclaims");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Aspnetuser", b =>
                {
                    b.Navigation("Aspnetuserclaims");

                    b.Navigation("Aspnetuserlogins");

                    b.Navigation("Aspnetusertokens");

                    b.Navigation("Blogcomments");

                    b.Navigation("Blogposts");

                    b.Navigation("Company");

                    b.Navigation("Seeker");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Company", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Companyfeedbacks");

                    b.Navigation("Jobopenings");
                });

            modelBuilder.Entity("InsightGlassTest.Server.Models.Seeker", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Companyfeedbacks");

                    b.Navigation("Seekerexperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
